// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches previous snapshot 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RCTScrollView
    ListEmptyComponent={
      <View
        style={
          {
            "alignItems": "center",
          }
        }
      >
        <IconClass
          brand={false}
          color="#ccc"
          light={false}
          name="question"
          regular={false}
          size={64}
          solid={false}
          style={
            {
              "marginBottom": 32,
              "marginTop": 128,
            }
          }
        />
        <Text
          style={
            {
              "color": "#ccc",
              "fontSize": 48,
              "fontWeight": "bold",
            }
          }
        >
          No Item
        </Text>
      </View>
    }
    ListHeaderComponent={
      <Text
        style={
          {
            "fontSize": 32,
            "fontWeight": "bold",
            "margin": 16,
          }
        }
      >
        Todo List
      </Text>
    }
    applyWindowCorrection={[Function]}
    canChangeSize={true}
    contentContainerStyle={
      {
        "backgroundColor": undefined,
        "minHeight": 1,
        "minWidth": 1,
        "paddingLeft": 0,
        "paddingRight": 0,
      }
    }
    contentHeight={0}
    contentWidth={0}
    data={
      [
        {
          "createdAt": 123,
          "title": "title",
        },
      ]
    }
    dataProvider={
      DataProvider {
        "_data": [
          {
            "createdAt": 123,
            "title": "title",
          },
        ],
        "_firstIndexToProcess": 0,
        "_hasStableIds": true,
        "_requiresDataChangeHandling": false,
        "_size": 1,
        "getStableId": [Function],
        "rowHasChanged": [Function],
      }
    }
    disableRecycling={false}
    estimatedItemSize={100}
    extendedState={{}}
    externalScrollView={[Function]}
    finalRenderAheadOffset={250}
    forceNonDeterministicRendering={true}
    horizontal={false}
    initialOffset={0}
    initialRenderIndex={0}
    isHorizontal={false}
    keyExtractor={[Function]}
    layoutProvider={
      GridLayoutProviderWithProps {
        "_acceptableRelayoutDelta": 1,
        "_getHeightOrWidth": [Function],
        "_getLayoutTypeForIndex": [Function],
        "_getSpan": [Function],
        "_hasExpired": false,
        "_maxSpan": 1,
        "_setLayoutForType": [Function],
        "_tempDim": {
          "height": 0,
          "width": 0,
        },
        "averageWindow": AverageWindow {
          "currentAverage": 100,
          "currentCount": 1,
          "inputValues": [
            100,
          ],
          "nextIndex": 1,
        },
        "defaultEstimatedItemSize": 100,
        "layoutObject": {
          "size": undefined,
          "span": undefined,
        },
        "props": {
          "ListEmptyComponent": <View
            style={
              {
                "alignItems": "center",
              }
            }
          >
            <IconClass
              brand={false}
              color="#ccc"
              light={false}
              name="question"
              regular={false}
              size={64}
              solid={false}
              style={
                {
                  "marginBottom": 32,
                  "marginTop": 128,
                }
              }
            />
            <Text
              style={
                {
                  "color": "#ccc",
                  "fontSize": 48,
                  "fontWeight": "bold",
                }
              }
            >
              No Item
            </Text>
          </View>,
          "ListHeaderComponent": <Text
            style={
              {
                "fontSize": 32,
                "fontWeight": "bold",
                "margin": 16,
              }
            }
          >
            Todo List
          </Text>,
          "data": [
            {
              "createdAt": 123,
              "title": "title",
            },
          ],
          "estimatedItemSize": 100,
          "keyExtractor": [Function],
          "numColumns": 1,
          "renderItem": [Function],
        },
        "renderWindowInsets": {
          "height": 0,
          "width": 0,
        },
        "shouldRefreshWithAnchoring": true,
      }
    }
    maxRenderAhead={750}
    numColumns={1}
    onEndReached={[Function]}
    onEndReachedThreshold={0}
    onEndReachedThresholdRelative={0}
    onItemLayout={[Function]}
    onLayout={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onSizeChanged={[Function]}
    onVisibleIndicesChanged={[Function]}
    removeClippedSubviews={false}
    renderAheadOffset={0}
    renderAheadStep={250}
    renderContentContainer={[Function]}
    renderItem={[Function]}
    renderItemContainer={[Function]}
    rowRenderer={[Function]}
    scrollEventThrottle={16}
    scrollThrottle={16}
    scrollViewProps={
      {
        "contentContainerStyle": {
          "backgroundColor": undefined,
          "minHeight": 1,
          "minWidth": 1,
          "paddingLeft": 0,
          "paddingRight": 0,
        },
        "onLayout": [Function],
        "onScrollBeginDrag": [Function],
        "refreshControl": undefined,
        "style": {
          "minHeight": 1,
          "minWidth": 1,
        },
      }
    }
    style={
      {
        "minHeight": 1,
        "minWidth": 1,
      }
    }
    suppressBoundedSizeException={true}
    windowCorrectionConfig={
      {
        "applyToInitialOffset": true,
        "applyToItemScroll": true,
        "value": {
          "endCorrection": 0,
          "startCorrection": 0,
          "windowShift": -1,
        },
      }
    }
  >
    <View>
      <View
        style={
          {
            "flexDirection": "column",
          }
        }
      >
        <AutoLayoutView
          enableInstrumentation={false}
          horizontal={false}
          onBlankAreaEvent={[Function]}
          onLayout={[Function]}
          renderAheadOffset={0}
          scrollOffset={0}
          style={
            {
              "height": 0,
              "width": 0,
            }
          }
          windowSize={0}
        />
      </View>
    </View>
  </RCTScrollView>
</View>
`;
